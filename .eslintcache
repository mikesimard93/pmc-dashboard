[{"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/index.js":"1","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/App.js":"2","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/hours_members.js":"3","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/gauge.js":"4","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/to_watch.js":"5","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/finance_gauge.js":"6","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/graph.js":"7","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/intro.js":"8","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data/data.js":"9","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/pie_chart_modules_hours.js":"10"},{"size":219,"mtime":1611353228160,"results":"11","hashOfConfig":"12"},{"size":15369,"mtime":1611600742700,"results":"13","hashOfConfig":"12"},{"size":2147,"mtime":1611576686477,"results":"14","hashOfConfig":"12"},{"size":701,"mtime":1611014086319,"results":"15","hashOfConfig":"12"},{"size":1791,"mtime":1611577669256,"results":"16","hashOfConfig":"12"},{"size":1031,"mtime":1611577103638,"results":"17","hashOfConfig":"12"},{"size":4679,"mtime":1611586157839,"results":"18","hashOfConfig":"12"},{"size":1603,"mtime":1611577621438,"results":"19","hashOfConfig":"12"},{"size":2087,"mtime":1610996798889,"results":"20","hashOfConfig":"12"},{"size":1025,"mtime":1611586533100,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"18jbzw8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/index.js",[],["46","47"],"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/App.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"import './App.css';\n\n// General Components\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport React from \"react\";\n\n// Introduction Components\nimport Members from './data_vizualisation/hours_members'\nimport Intro from './data_vizualisation/intro'\nimport ToWatch from './data_vizualisation/to_watch'\n\n// KPIs Components\nimport GaugePerformance from './data_vizualisation/gauge'\nimport FinancesGauge from './data_vizualisation/finance_gauge'\nimport PieChartHoursModules from './data_vizualisation/pie_chart_modules_hours'\n\n// Graph Tree\nimport Graph from './data_vizualisation/graph'\n\n\n// Pie Charts creation\nconst asana = require('asana');\nconst client = asana.Client.create().useAccessToken('1/130782075921760:ea95e018abbbc064e35274b2f6bc6cce'); // Mike's key\nconst Harvest = require('node-harvest-api')\nconst account_id = 1283808\nconst token = '2297874.pt.O_TLl_k0m8XTbi3eA5iXzoPkKHUftpx4Mp9Fq8zThEI8gqx2DY95hqJbDn5a0l9thCJEug23Z_UBuAh8sifVzw'\nconst app_name = 'PMC dashboard'\nconst harvest = new Harvest(account_id, token, app_name)\n\nvar weekAgo = new Date();\nvar pastDate = weekAgo.getDate() - 8;\nweekAgo.setDate(pastDate);\n\nvar startSessionDate = new Date(2021, 0, 10, 0, 0, 0, 0);\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\ntoday = dd + '/' + mm + '/' + yyyy;\n\n\nvar yesterday = new Date();\npastDate = yesterday.getDate() - 1;\nyesterday.setDate(pastDate);\n\n\n\n\n\nfunction App() {\n\n    const [hoursPerMember, updateHoursPerMember] = React.useState([]);\n    const [hoursPerMemberLoading, updateHoursPerMemberLoading] = React.useState(true);\n\n    const [hoursPerModule, updateHoursPerModule] = React.useState([]);\n    const [hoursPerModuleLoading, updateHoursPerModuleLoading] = React.useState(true);\n\n    const [hoursPerType, updateHoursPerType] = React.useState([]);\n    const [hoursPerTypeLoading, updateHoursPerTypeLoading] = React.useState(true);\n\n    let grossProductData = [{\n        state: 'Michael Simard',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Simon Chamorro',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Samuel Hovington',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Nicolas Morin',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Santiago Moya',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Anthony Marchand',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Antoine Leblanc',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Raphaël Labrecque',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'William Dubois',\n        moyenne: 0,\n        actuel: 0,\n    }, {\n        state: 'Étienne Gendron',\n        moyenne: 0,\n        actuel: 0,\n    }];\n\n\n    let modules = [{\n        name: 'Admin',\n        area: 0\n    }, {\n        name: 'Contrôle',\n        area: 0\n    }, {\n        name: 'Chassis',\n        area: 0\n    }, {\n        name: 'Puissance',\n        area: 0\n    }, {\n        name: 'Bras',\n        area: 0\n    }, {\n        name: 'Suspension',\n        area: 0\n    }, {\n        name: 'Propulsion',\n        area: 0\n    }, {\n        name: 'Intégration',\n        area: 0\n    }, {\n        name: 'Science',\n        area: 0\n    }, {\n        name: 'Connect 4',\n        area: 0\n    }];\n\n    let types = [{\n        name: 'Rencontre',\n        area: 0\n    },{\n        name: 'Conception',\n        area: 0\n    },{\n        name: 'Gestion',\n        area: 0\n    }, {\n        name: 'Fabrication & Test',\n        area: 0\n    }, {\n        name: 'Activité pédagogique',\n        area: 0\n    }, {\n        name: 'Présentation',\n        area: 0\n    }, {\n        name: 'Rédaction',\n        area: 0\n    }, {\n        name: 'Travail COROM',\n        area: 0\n    }, {\n        name: 'Autre (expliquez)',\n        area: 0\n    }];\n\n    React.useEffect(() => {\n        getData()\n    }, [])\n\n    function getTask(task_gid) {\n        return new Promise(async resolve => {\n            client.tasks.getTask(task_gid)\n                .then((result) => {\n                    resolve(result);\n                });\n        })\n    }\n\n    function get_hours(entry_list, type, session_date, today) {\n        var diff =(today.getTime() - session_date.getTime()) / 1000;\n        diff /= (60 * 60 * 24 * 7);\n        var week = Math.abs(Math.round(diff));\n\n        for (var i = 0; i < entry_list.length; i++) {\n            for (var j = 0; j < grossProductData.length; j++) {\n                if (entry_list[i].user.name === grossProductData[j].state)\n                {\n                    if (type === \"actuel\"){\n                        grossProductData[j].actuel += entry_list[i].hours\n                    }\n                    else if (type === \"moyenne\") {\n                        grossProductData[j].moyenne += entry_list[i].hours\n                    }\n\n                }\n            }\n        }\n\n        for (var j = 0; j < grossProductData.length; j++) {\n            grossProductData[j].moyenne /= week\n        }\n\n    }\n\n    function pie_chart(entries) {\n        return new Promise(async resolve => {\n            for (var i = 0; i < entries.length; i++) {\n                console.log(String(i) + \" entry over \" + String(entries.length) + \" entries\")\n                try {\n                    const task = await getTask(entries[i].external_reference.id)\n                    var task_module, task_type\n                    if (task.custom_fields[0].name == \"Harvest\") {\n                        task_type = task.custom_fields[0].enum_value.name\n                        task_module = task.custom_fields[1].enum_value.name\n                    }\n                    else {\n                        task_type = task.custom_fields[1].enum_value.name\n                        task_module = task.custom_fields[0].enum_value.name\n                    }\n                    \n                    for (var j = 0; j < modules.length; j++) {\n                        if (task_module === modules[j].name) {\n                            modules[j].area += entries[i].hours\n                            break;\n                        }\n                \n                    }\n                    for (var k = 0; k < types.length; k++) {\n                        // console.log(task_type)\n                        // console.log(task_type)\n                        if (task_type == types[k].name) {\n                            types[k].area += entries[i].hours\n                            break;\n                        }\n                    }\n                }\n                catch(err) {\n                    // console.log(err)\n                }\n                // console.log(modules)\n                // console.log(types)\n\n            }\n            resolve(types);\n        })\n    }\n\n    function roundData() {\n        return new Promise(resolve => {\n            for (var i =0; i < grossProductData.length; i++) {\n                grossProductData[i].moyenne = Math.round(grossProductData[i].moyenne)\n                grossProductData[i].actuel = Math.round(grossProductData[i].actuel)\n            }\n\n            for (var i =0; i < types.length; i++) {\n                types[i].area = Math.round(types[i].area)\n            }\n\n            for (var i =0; i < modules.length; i++) {\n                modules[i].area = Math.round(modules[i].area)\n            }\n            resolve();\n        })\n    }\n\n    async function getData() {\n\n        let entries = await harvest.time_entries.get({project_id: 24745864})\n        var entry_list_session = []\n        var entry_list_week = []\n        for (var i =0; i < entries.length; i++) {\n            var parts = entries[i].spent_date.split('-');\n            var year = parts[0]\n            var month = parts[1]\n            var day = parts[2]\n            var entry_date = new Date(year, month-1, day)\n            if (entry_date > weekAgo && entries[i].external_reference.id !== '1199598736876796') {\n                entry_list_week.push(entries[i])\n            }\n            if (entry_date > startSessionDate && entries[i].external_reference.id !== '1199598736876796') {\n                entry_list_session.push(entries[i])\n            }\n        }\n        get_hours(entry_list_week, \"actuel\", weekAgo, yesterday)\n        get_hours(entry_list_session, \"moyenne\", startSessionDate, yesterday)\n        updateHoursPerMember(grossProductData)\n        updateHoursPerMemberLoading(false)\n\n        const array = await pie_chart(entry_list_week)\n        updateHoursPerModule(modules)\n        updateHoursPerModuleLoading(false)\n\n        updateHoursPerType(array)\n        updateHoursPerModuleLoading(false)\n        updateHoursPerTypeLoading(false)\n        console.log(array)\n        console.log(modules)\n\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Grid container direction={'row'}>\n                <Box >\n                    <Box >\n                        <img src={process.env.PUBLIC_URL + './photos_membres/AntoineM.png'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/antoine.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/etienne.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/mike.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/nic.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/raph.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/sam.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/santiago.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/simon.jpg'} align='left' height=\"150\"/>\n                        <img src={process.env.PUBLIC_URL + './photos_membres/william.jpg'} align='left' height=\"150\"/>\n                    </Box>\n                </Box>\n                <Box p={2}>\n                    <Box><Typography align=\"left\" variant=\"h4\" component=\"h2\">\n                        TABLEAU DE BORD ZEUS\n                    </Typography>\n                        <Typography align=\"left\" variant=\"h5\" component=\"h2\">\n                            {today}\n                        </Typography>\n                    </Box>\n                </Box>\n            </Grid>\n\n\n            <Box p={4}>\n                <Grid container alignItems=\"stretch\" direction={'row'} spacing='5'>\n\n                    <Grid item xs={12} sm={12} md={3} lg={3}>\n                        <Box m={0}>\n                            <Paper height=\"100%\"  elevation={4}>\n                                <Intro></Intro>\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} md={3} lg={3}>\n                        <Box  m={0}>\n                            <Paper elevation={4}>\n                                <Box p={0}>\n                                    <ToWatch></ToWatch>\n                                </Box>\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n\n                    <Grid item xs={12} sm={12} md={3} lg={3}>\n                        <Box  m={0}>\n                            <Paper elevation={4}>\n                                <Box p={2}>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                        Ratio\n                                    </Typography>\n                                    <GaugePerformance></GaugePerformance>\n                                </Box>\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} md={3} lg={3}>\n                        <Box  m={0}>\n                            <Paper elevation={4}>\n                                <Box p={2}>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                        Finances\n                                    </Typography>\n                                    <FinancesGauge></FinancesGauge>\n                                </Box>\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} md={6} lg={6}>\n                        <Box m={0}>\n                            <Paper elevation={4}>\n                                <Box p={2}>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                        Heures vs Module\n                                    </Typography>\n                                    <PieChartHoursModules data={hoursPerModule} loading={hoursPerModuleLoading}></PieChartHoursModules>\n                                </Box>\n\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} md={6} lg={6}>\n                        <Box m={0}>\n                            <Paper elevation={4}>\n                                <Box p={2}>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                        Heures vs Membre\n                                    </Typography>\n                                    <PieChartHoursModules loading={hoursPerTypeLoading} data={hoursPerType}></PieChartHoursModules>\n                                </Box>\n\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} md={6} lg={6}>\n                        <Box mt={0}>\n                            <Paper elevation={4}>\n                                <Box p={2}>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                        Heures vs Module\n                                    </Typography>\n                                    <Members data={hoursPerMember} loading={hoursPerMemberLoading}></Members>\n                                </Box>\n\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} md={12} lg={12}>\n                        <Box mt={0}>\n                            <Paper elevation={4}>\n                                <Box p={2}>\n                                    <Typography variant=\"h5\" component=\"h2\">\n                                        Arbre des jalons\n                                    </Typography>\n                                </Box>\n                                <Box p={2}>\n                                    <Graph></Graph>\n                                </Box>\n                            </Paper>\n                        </Box>\n                    </Grid>\n\n                </Grid>\n\n            </Box>\n            <Box p={2}>\n                Tableau généré le {today}\n            </Box>\n        </div>\n    );\n}\n\nexport default App;","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/hours_members.js",[],"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/gauge.js",["65","66","67"],"import React from 'react';\nimport { BarGauge, Label, Legend, Export, Title, Font } from 'devextreme-react/bar-gauge';\n\nconst values = [1];\nconst format = {\n    type: 'fixedPoint',\n    precision: 1\n};\n\nclass App extends React.Component {\n\n    render() {\n        return (\n\n            <BarGauge\n                id=\"gauge\"\n                startValue={0}\n                endValue={2}\n                defaultValues={values}\n            >\n                <Label indent={20} format={format} customizeText={this.customizeText} />\n                <Export enabled={false} />\n            </BarGauge>\n        );\n    }\n\n    customizeText({ valueText }) {\n        return `${valueText}`;\n    }\n}\n\nexport default App;","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/to_watch.js",["68","69","70"],"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/finance_gauge.js",["71","72"],"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/graph.js",["73","74","75","76","77","78","79"],"import Tree from 'react-tree-graph';\nimport React from \"react\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport '../App.css';\n\n\nconst asana = require('asana');\nconst client = asana.Client.create().useAccessToken('1/1105136235820223:056448b931a5e79f598f1fd698d25356');\n\n\nfunction Graph() {\n    const [graph, updateGraph] = React.useState([]);\n    const [dataLoaded, changeLoadStatus] = React.useState(false);\n    var tree = {}\n    React.useEffect(() => {\n        console.log(tree)\n        test()\n    }, [graph])\n\n    var milestones = {}\n    function getMilestones() {\n        return new Promise(resolve => {\n            client.tasks.searchInWorkspace('622159997203998', {'resource_subtype': 'milestone'})\n                // ,opt_fields=['due_on','assignee','completed_at','custom_fields','name', 'created_at', 'resource_subtype'], opt_pretty=True\n                .then((result) => {\n                    resolve(result);\n                });\n        })\n    }\n\n    function getTask(task_gid) {\n        return new Promise(resolve => {\n            client.tasks.getTask(task_gid)\n                .then((result) => {\n                    resolve(result);\n                });\n        })\n    }\n\n    function getDependencies(task_gid) {\n        return new Promise(resolve => {\n            client.tasks.dependencies(task_gid)\n                .then((result) => {\n                    resolve(result);\n                });\n        })\n    }\n\n    function fillObject(obj, task, time) {\n        return new Promise(resolve => {\n            const new_key = task.name\n            obj.children.push( {\n                gProps: {\n                    className: 'red-node'\n                },\n                name: task.name,\n                gid: task.gid,\n                total_dependencies_time: 0.0,\n                due_on: task.due_on,\n                created_at: task.created_at,\n                estimated_time: task.custom_fields[2].number_value,\n                completed_at: task.completed_at,\n                module: task.custom_fields[0].enum_value.name,\n                type: task.resource_subtype,\n                clocked_time: time\n            });\n\n            resolve(obj);\n        })\n    }\n\n    function recursive(task_dependencies, obj) {\n        return new Promise(async resolve => {\n            obj.children = new Array();\n            var total_time = 0\n            var time_to_add = 0\n            for (var i = 0; i < task_dependencies.length; i++) {\n                var dependency_time = 0\n                const dependency = await getTask(task_dependencies[i].gid)\n                if (dependency.custom_fields[2].number_value !== null) {\n                    total_time += dependency.custom_fields[2].number_value\n                }\n                await fillObject(obj, dependency, dependency_time)\n                var sub_task_dependencies = await getDependencies(dependency.gid)\n                if (sub_task_dependencies.length !== 0) {\n                    console.log(obj.children)\n                    var time_to_add = await recursive(sub_task_dependencies, obj.children[obj.children.length - 1])\n                }\n                else {}\n                total_time += time_to_add\n            }\n            obj.total_dependencies_time = total_time\n            resolve(total_time);\n        });\n    }\n    async function test() {\n        var top_task = {}\n        const milestones = await getMilestones();\n        // console.dir(milestones.data)\n        var i;\n        for (i = 0; i < milestones.data.length; i++) {\n            const task = await getTask(milestones.data[i].gid);\n            try {\n                if (task.custom_fields[3].enum_value.name == 'Goal'){\n                    top_task = task\n                    break;\n                }\n            }\n            catch(err){}\n        }\n        const dependencies = await getDependencies(top_task.gid)\n\n        tree.name = top_task.name\n        tree.children = new Array();\n        await fillObject(tree, top_task, 0)\n        await recursive(dependencies, tree)\n        console.log(tree)\n        updateGraph(tree)\n        changeLoadStatus(true)\n        return tree\n    }\n\n    return (\n        <div >\n            {(function () {\n                if (!dataLoaded) {\n                    return <Box > <CircularProgress size={40} />\n                    <Box pt={2}>May take several minutes to load..</Box>\n                    </Box>\n                } else {\n                    return <Tree\n                        data={graph}\n                        nodeRadius={30}\n                        height={2000}\n                        width={1500}/>;\n                }\n            })()}\n        </div>\n    );\n}\n\nexport default Graph;","/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/intro.js",["80","81","82"],"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data/data.js",[],"/Users/mikesimard/Documents/PMC/pmc-dashboard/src/data_vizualisation/pie_chart_modules_hours.js",["83"],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":170,"column":8,"nodeType":"90","endLine":170,"endColumn":10,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":201,"column":18,"nodeType":"94","messageId":"95","endLine":201,"endColumn":19},{"ruleId":"96","severity":1,"message":"97","line":214,"column":52,"nodeType":"98","messageId":"99","endLine":214,"endColumn":54},{"ruleId":"96","severity":1,"message":"97","line":233,"column":39,"nodeType":"98","messageId":"99","endLine":233,"endColumn":41},{"ruleId":"100","severity":1,"message":"101","line":250,"column":14,"nodeType":"94","messageId":"102","endLine":250,"endColumn":23},{"ruleId":"92","severity":1,"message":"103","line":257,"column":22,"nodeType":"94","messageId":"95","endLine":257,"endColumn":23},{"ruleId":"92","severity":1,"message":"103","line":261,"column":22,"nodeType":"94","messageId":"95","endLine":261,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":309,"column":25,"nodeType":"106","endLine":309,"endColumn":120},{"ruleId":"104","severity":1,"message":"105","line":310,"column":25,"nodeType":"106","endLine":310,"endColumn":119},{"ruleId":"104","severity":1,"message":"105","line":311,"column":25,"nodeType":"106","endLine":311,"endColumn":119},{"ruleId":"104","severity":1,"message":"105","line":312,"column":25,"nodeType":"106","endLine":312,"endColumn":116},{"ruleId":"104","severity":1,"message":"105","line":313,"column":25,"nodeType":"106","endLine":313,"endColumn":115},{"ruleId":"104","severity":1,"message":"105","line":314,"column":25,"nodeType":"106","endLine":314,"endColumn":116},{"ruleId":"104","severity":1,"message":"105","line":315,"column":25,"nodeType":"106","endLine":315,"endColumn":115},{"ruleId":"104","severity":1,"message":"105","line":316,"column":25,"nodeType":"106","endLine":316,"endColumn":120},{"ruleId":"104","severity":1,"message":"105","line":317,"column":25,"nodeType":"106","endLine":317,"endColumn":117},{"ruleId":"104","severity":1,"message":"105","line":318,"column":25,"nodeType":"106","endLine":318,"endColumn":119},{"ruleId":"100","severity":1,"message":"107","line":2,"column":27,"nodeType":"94","messageId":"102","endLine":2,"endColumn":33},{"ruleId":"100","severity":1,"message":"108","line":2,"column":43,"nodeType":"94","messageId":"102","endLine":2,"endColumn":48},{"ruleId":"100","severity":1,"message":"109","line":2,"column":50,"nodeType":"94","messageId":"102","endLine":2,"endColumn":54},{"ruleId":"100","severity":1,"message":"110","line":4,"column":8,"nodeType":"94","messageId":"102","endLine":4,"endColumn":19},{"ruleId":"100","severity":1,"message":"111","line":6,"column":8,"nodeType":"94","messageId":"102","endLine":6,"endColumn":14},{"ruleId":"100","severity":1,"message":"112","line":28,"column":11,"nodeType":"94","messageId":"102","endLine":28,"endColumn":15},{"ruleId":"100","severity":1,"message":"108","line":2,"column":43,"nodeType":"94","messageId":"102","endLine":2,"endColumn":48},{"ruleId":"100","severity":1,"message":"109","line":2,"column":50,"nodeType":"94","messageId":"102","endLine":2,"endColumn":54},{"ruleId":"88","severity":1,"message":"113","line":19,"column":8,"nodeType":"90","endLine":19,"endColumn":15,"suggestions":"114"},{"ruleId":"100","severity":1,"message":"115","line":21,"column":9,"nodeType":"94","messageId":"102","endLine":21,"endColumn":19},{"ruleId":"100","severity":1,"message":"116","line":52,"column":19,"nodeType":"94","messageId":"102","endLine":52,"endColumn":26},{"ruleId":"117","severity":1,"message":"118","line":75,"column":28,"nodeType":"119","messageId":"120","endLine":75,"endColumn":39},{"ruleId":"92","severity":1,"message":"121","line":88,"column":25,"nodeType":"94","messageId":"95","endLine":88,"endColumn":36},{"ruleId":"96","severity":1,"message":"97","line":105,"column":59,"nodeType":"98","messageId":"99","endLine":105,"endColumn":61},{"ruleId":"117","severity":1,"message":"118","line":115,"column":25,"nodeType":"119","messageId":"120","endLine":115,"endColumn":36},{"ruleId":"100","severity":1,"message":"110","line":4,"column":8,"nodeType":"94","messageId":"102","endLine":4,"endColumn":19},{"ruleId":"100","severity":1,"message":"111","line":6,"column":8,"nodeType":"94","messageId":"102","endLine":6,"endColumn":14},{"ruleId":"100","severity":1,"message":"112","line":29,"column":11,"nodeType":"94","messageId":"102","endLine":29,"endColumn":15},{"ruleId":"100","severity":1,"message":"122","line":7,"column":5,"nodeType":"94","messageId":"102","endLine":7,"endColumn":9},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["125"],"no-redeclare","'j' is already defined.","Identifier","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'roundData' is defined but never used.","unusedVar","'i' is already defined.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Legend' is defined but never used.","'Title' is defined but never used.","'Font' is defined but never used.","'CardActions' is defined but never used.","'Button' is defined but never used.","'bull' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'test' and 'tree'. Either include them or remove the dependency array.",["126"],"'milestones' is assigned a value but never used.","'new_key' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'time_to_add' is already defined.","'Size' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [getData]",{"range":"131","text":"132"},"Update the dependencies array to be: [graph, test, tree]",{"range":"133","text":"134"},[4078,4080],"[getData]",[569,576],"[graph, test, tree]"]